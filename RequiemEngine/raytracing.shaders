#version 460
#pragma multicompile rgen rchit rmiss
#extension GL_NV_ray_tracing : require
#if CLOSEHIT_SHADER
#extension GL_EXT_nonuniform_qualifier : enable
#endif

#include "BRDF.gh"
#include "rand.gh"

struct hitPayload
{
    vec3 hitValue;//next tracing direction
    vec3 hitPosition;//next src
    vec3 hitColor;//hit light
    vec3 hitAttenuation;//hit attenuation
    uint index;
};

#if CLOSEHIT_SHADER
#include "VertexData.gh"
layout(binding = 3, set = 0) buffer readonly VERTICES 
{
    vec4 raw_vertices[];
};

layout(binding = 4, set = 0) buffer readonly INDICES
{
    uint indices[];
};
layout(binding = 5, set = 0) buffer readonly TRANSFORM_INDICES
{
    uint transform_indices[];
};
layout(binding = 0, set = 1) buffer readonly TRANSFORMS{
	mat4 transforms[];
};
DEFINE_VERTEX_DATA_LIGHT_UNPACK_FUNCTION(raw_vertices)
#endif

#if RAYGEN_SHADER | MISS_SHADER
layout(binding = 6, set = 0) uniform sampler2D SkyboxImage;
vec3 SampleSkybox(vec3 ray)
{
    float alpha = acos(ray.y) / (3.1415926);
    float beta = min(1.0, max(0.0, (atan(ray.z, ray.x) + 3.14159) * 0.15915) );
    return textureLod(SkyboxImage, vec2(beta, alpha), 0.0).xyz;
}
#endif

#if RAYGEN_SHADER | CLOSEHIT_SHADER
layout(binding = 9, set = 0) uniform TIME
{
    float time;
};

vec3 RandSampelGGX( float _roughness, float _time, uint _rand_seed, in vec3 _normal, in vec3 view_dir )
{
    vec3 UpVector = abs(_normal.z) < 0.99 ? vec3(0,0,1) : vec3(1,0,0);
	vec3 TangentX = normalize( cross( UpVector, _normal ) );
	vec3 TangentY = normalize(cross( _normal, TangentX ));
    float f0 = rand_zero_one(_rand_seed * 2 + int(_time * 1000.0));
    float f1 = rand_zero_one(_rand_seed * 2 + int(_time * 1000.0) + 1000);
    vec3 half_view = importance_sample_GGX(f0, f1, _roughness, _normal, TangentX, TangentY);
    return normalize((2.0 * dot( view_dir, half_view )) * half_view - view_dir);
}
#endif

#if RAYGEN_SHADER
layout(location = 0) rayPayloadNV hitPayload prd;
#elif CLOSEHIT_SHADER | MISS_SHADER
layout(location = 0) rayPayloadInNV hitPayload prd;
#endif

#if RAYGEN_SHADER
#include "camera.gh"
layout(binding = 0, set = 0) uniform CAMERA
{
    Camera cam;
};

layout(binding = 1, set = 0) uniform accelerationStructureNV topLevelAS;

layout(binding = 2, set = 0, rgba8) uniform image2D image;

layout(binding = 7, set = 0) uniform OLDCAMERA
{
    Camera oldCam;
};

layout(binding = 8, set = 0) uniform sampler2D oldSampler;
layout(binding = 10, set = 0) uniform sampler2D depthSampler;
layout(binding = 11, set = 0) uniform sampler2D normalSampler;

vec3 ProjectionInverse(in mat4 _inv_camera, in vec3 _screen_space_val)
{
    vec4 ws_raw = _inv_camera * vec4(_screen_space_val, 1.0);
    return ws_raw.xyz / ws_raw.w;
}
#define TEMP_ROUGHNESS 0.4
void main() 
{
    const vec2 pixelCenter = vec2(gl_LaunchIDNV.xy) + vec2(0.5);
    const vec2 inUV = pixelCenter/vec2(gl_LaunchSizeNV.xy);
    prd.index = uint(gl_LaunchIDNV.x + gl_LaunchIDNV.y * gl_LaunchSizeNV.x);
    vec2 d = inUV * 2.0 - 1.0;
    //vec4 origin    = cam.viewInverse * vec4(0, 0, 0, 1);
    vec4 target    = cam.projInverse * vec4(d.x, d.y, 1, 1);
    vec4 direction = cam.viewInverse * vec4(normalize(target.xyz / target.w), 0);

    //first time ray selected using roughness
    float depth = texture(depthSampler, inUV).x;
    vec3 position = ProjectionInverse(cam.projInverse, vec3(d, depth));
    vec4 origin = (cam.viewInverse * vec4(position, 1.0));
    vec3 view = (cam.viewInverse * vec4(position, 0.0)).xyz;
    vec3 normal = normalize(texture(normalSampler, inUV).xyz * 2.0 - 1.0);

    vec3 trace_dir = RandSampelGGX(TEMP_ROUGHNESS, time, prd.index, normal, -view);

    //reprojected value
    vec4 reprojected = cam.viewInverse * target;
    reprojected /= reprojected.w;
    reprojected = oldCam.proj * oldCam.view * reprojected;
    reprojected /= reprojected.w;
    vec2 reproj_uv = reprojected.xy * 0.5 + 0.5;
    vec4 old_value = texture(oldSampler, reproj_uv);

    prd.hitValue = trace_dir.xyz;
    prd.hitColor = vec3(0.0);
    uint  rayFlags = gl_RayFlagsOpaqueNV;
    float tMin     = 0.05;
    float tMax     = 10000.0;
    int trace_times = 2;
    vec3 final_color = vec3(0.0);
    vec3 accumulated_attenuation = vec3(1.0);
    while(trace_times > 0)
    {
        traceNV(topLevelAS,     // acceleration structure
                rayFlags,       // rayFlags
                0xFF,           // cullMask
                0,              // sbtRecordOffset
                0,              // sbtRecordStride
                0,              // missIndex
                origin.xyz,     // ray origin
                tMin,           // ray min range
                trace_dir.xyz,  // ray direction
                tMax,           // ray max range
                0               // payload (location = 0)
        );
        if(dot(prd.hitValue, prd.hitValue) < 0.2)
        {
            final_color += prd.hitColor * accumulated_attenuation;
            break;
        }
        else
        {
            final_color += prd.hitColor * accumulated_attenuation;
            accumulated_attenuation *= prd.hitAttenuation;
            origin.xyz = prd.hitPosition;
            trace_dir.xyz = prd.hitValue;
        }
        --trace_times;
    }
    if(dot(prd.hitValue, prd.hitValue) > 0.5)
    {
        final_color += SampleSkybox(prd.hitValue) * accumulated_attenuation;
    }

    float old_val = old_value.w * 6.0;
    vec4 return_color = vec4((old_value.xyz * old_val + final_color) / (old_val + 1), min(old_val + 1, 6.0) / 6.0);
    imageStore(image, ivec2(gl_LaunchIDNV.xy), return_color);
}
#endif

#if MISS_SHADER
//layout(location = 0) rayPayloadInNV hitPayload prd;
void main()
{
    prd.hitColor = SampleSkybox(prd.hitValue);
    prd.hitValue = vec3(0.0, 0.0, 0.0);
}
#endif



#if CLOSEHIT_SHADER

hitAttributeNV vec3 attribs;
void main()
{
    mat4 transform = transforms[transform_indices[gl_InstanceID]];
    ivec3 this_indices = ivec3(indices[3 * gl_PrimitiveID], indices[3 * gl_PrimitiveID + 1], indices[3 * gl_PrimitiveID + 2]);
    VertexDataLight v0 = UnPackVertexData(this_indices.x);
    VertexDataLight v1 = UnPackVertexData(this_indices.y);
    VertexDataLight v2 = UnPackVertexData(this_indices.z);

    const vec3 barycentricCoords = vec3(1.0f - attribs.x - attribs.y, attribs.x, attribs.y);

    vec3 normal = normalize(v0.normal * barycentricCoords.x + v1.normal * barycentricCoords.y + v2.normal * barycentricCoords.z);
    vec3 position = v0.position * barycentricCoords.x + v1.position * barycentricCoords.y + v2.position * barycentricCoords.z;
    normal = normalize((transform * vec4(normal, 0.0)).xyz);

	vec3 UpVector = abs(normal.z) < 0.99 ? vec3(0,0,1) : vec3(1,0,0);
	vec3 TangentX = normalize( cross( UpVector, normal ) );
	vec3 TangentY = normalize(cross( normal, TangentX ));

    float f0 = rand_zero_one(prd.index * 2 + int(time * 1000.0));
    float f1 = rand_zero_one(prd.index * 2 + int(time * 1000.0) + 1000);

    vec3 half_view = importance_sample_GGX(f0, f1, 0.1, normal, TangentX, TangentY);
    vec3 light_dir = 2 * dot( -prd.hitValue, half_view ) * half_view + prd.hitValue;

    prd.hitPosition = (transform * vec4(position, 1.0)).xyz;
    prd.hitValue = light_dir;
    prd.hitColor = vec3(0.0);
    prd.hitAttenuation = vec3(max(0.0, dot(prd.hitValue, normal)));
}
#endif

