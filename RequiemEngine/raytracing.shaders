#version 460
#pragma multicompile rgen rchit rmiss
#extension GL_NV_ray_tracing : require

struct hitPayload
{
    vec3 hitValue;//next tracing direction
    vec3 hitPosition;//next src
    vec3 hitColor;//hit light
    vec3 hitAttenuation;//hit attenuation
};

#if CLOSEHIT_SHADER
#include "VertexData.gh"
layout(binding = 3, set = 0) buffer readonly VERTICES 
{
    vec4 raw_vertices[];
};

layout(binding = 4, set = 0) buffer readonly INDICES
{
    uint indices[];
};
layout(binding = 5, set = 0) buffer readonly TRANSFORM_INDICES
{
    uint transform_indices[];
};
layout(binding = 0, set = 1) buffer readonly TRANSFORMS{
	mat4 transforms[];
};
DEFINE_VERTEX_DATA_LIGHT_UNPACK_FUNCTION(raw_vertices)
#endif

#if RAYGEN_SHADER
#include "camera.gh"
layout(binding = 0, set = 0) uniform CAMERA
{
    Camera cam;
};

layout(binding = 1, set = 0) uniform accelerationStructureNV topLevelAS;

layout(binding = 2, set = 0, rgba8) uniform image2D image;



layout(location = 0) rayPayloadNV hitPayload prd;

void main() 
{
    const vec2 pixelCenter = vec2(gl_LaunchIDNV.xy) + vec2(0.5);
    const vec2 inUV = pixelCenter/vec2(gl_LaunchSizeNV.xy);
    vec2 d = inUV * 2.0 - 1.0;
    vec4 origin    = cam.viewInverse * vec4(0, 0, 0, 1);
    vec4 target    = cam.projInverse * vec4(d.x, d.y, 1, 1);
    vec4 direction = cam.viewInverse * vec4(normalize(target.xyz / target.w), 0);
    prd.hitValue = direction.xyz;
    prd.hitColor = vec3(0.0);
    uint  rayFlags = gl_RayFlagsOpaqueNV;
    float tMin     = 0.001;
    float tMax     = 10000.0;
    int trace_times = 3;
    vec3 final_color = vec3(0.0);
    vec3 accumulated_attenuation = vec3(1.0);
    while(trace_times > 0)
    {
        traceNV(topLevelAS,     // acceleration structure
                rayFlags,       // rayFlags
                0xFF,           // cullMask
                0,              // sbtRecordOffset
                0,              // sbtRecordStride
                0,              // missIndex
                origin.xyz,     // ray origin
                tMin,           // ray min range
                direction.xyz,  // ray direction
                tMax,           // ray max range
                0               // payload (location = 0)
        );
        if(dot(prd.hitValue, prd.hitValue) < 0.2)
        {
            final_color += prd.hitColor * accumulated_attenuation;
            break;
        }
        else
        {
            final_color += prd.hitColor * accumulated_attenuation;
            accumulated_attenuation *= prd.hitAttenuation;
            origin.xyz = prd.hitPosition;
            direction.xyz = prd.hitValue;
        }
        --trace_times;
    }
    imageStore(image, ivec2(gl_LaunchIDNV.xy), vec4(final_color, 1.0));
    //imageStore(image, ivec2(gl_LaunchIDNV.xy), vec4(1.0, 0.0, 0.0, 1.0));
}
#endif

#if MISS_SHADER
layout(location = 0) rayPayloadInNV hitPayload prd;

void main()
{

    prd.hitValue = vec3(0.0, 0.0, 0.0);
    prd.hitColor = vec3(0.5, 1.0, 1.0);
}
#endif

#if CLOSEHIT_SHADER
#extension GL_EXT_nonuniform_qualifier : enable

layout(location = 0) rayPayloadInNV hitPayload prd;

hitAttributeNV vec3 attribs;



void main()
{
    mat4 transform = transforms[transform_indices[gl_InstanceID]];
    ivec3 this_indices = ivec3(indices[3 * gl_PrimitiveID], indices[3 * gl_PrimitiveID + 1], indices[3 * gl_PrimitiveID + 2]);
    VertexDataLight v0 = UnPackVertexData(this_indices.x);
    VertexDataLight v1 = UnPackVertexData(this_indices.y);
    VertexDataLight v2 = UnPackVertexData(this_indices.z);

    const vec3 barycentricCoords = vec3(1.0f - attribs.x - attribs.y, attribs.x, attribs.y);

    vec3 normal = normalize(v0.normal * barycentricCoords.x + v1.normal * barycentricCoords.y + v2.normal * barycentricCoords.z);
    vec3 position = v0.position * barycentricCoords.x + v1.position * barycentricCoords.y + v2.position * barycentricCoords.z;
    normal = normalize((transform * vec4(normal, 0.0)).xyz);
    prd.hitPosition = (transform * vec4(position, 1.0)).xyz;
    prd.hitValue = normalize(reflect(prd.hitValue, normal));
    prd.hitColor = vec3(0.0);
    prd.hitAttenuation = vec3(max(0.0, dot(prd.hitValue, normal)));
}
#endif

