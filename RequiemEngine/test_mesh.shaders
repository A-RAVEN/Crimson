#version 460

#pragma multicompile task

#extension GL_KHR_shader_subgroup_ballot: enable
#extension GL_NV_mesh_shader: enable
  
#extension GL_KHR_shader_subgroup_basic : require
#extension GL_KHR_shader_subgroup_ballot : require
#extension GL_KHR_shader_subgroup_vote : require

#if TASK_SHADER

#extension GL_KHX_shader_explicit_arithmetic_types_int8 : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int8 : enable
#extension GL_NV_gpu_shader5 : enable
#extension GL_EXT_gpu_shader5 : enable

#define GROUP_SIZE 32
#define meshletCount 32

layout(local_size_x=32) in;

taskNV out Task {
  uint      baseID;
  uint8_t   subIDs[GROUP_SIZE];
} OUT;

struct MeshletDescription
{
  uint m_VertexCount;
  uint m_PrimitiveCount;
  uint m_VertexBegin;
  uint m_PrimitiveBegin;
};

layout(std140, binding = 0) buffer readonly MESHLET_DESCS
{
  MeshletDescription meshletDescs[];
};

void main() {
  // we padded the buffer to ensure we don't access it out of bounds
  MeshletDescription desc = meshletDescs[gl_GlobalInvocationID.x];

  // implement some early culling function
  bool render = gl_GlobalInvocationID.x < meshletCount;

  uvec4 vote  = subgroupBallot(render);
  uint  tasks = subgroupBallotBitCount(vote);

  if (gl_LocalInvocationID.x == 0) {
    // write the number of surviving meshlets, i.e. 
    // mesh workgroups to spawn
    gl_TaskCountNV = tasks;

    // where the meshletIDs started from for this task workgroup
    OUT.baseID = gl_WorkGroupID.x * GROUP_SIZE;
  }

  {
    // write which children survived into a compact array
    uint idxOffset = subgroupBallotExclusiveBitCount(vote);
    if (render) {
      OUT.subIDs[idxOffset] = uint8_t(gl_LocalInvocationID.x);
    }
  }
}
#endif