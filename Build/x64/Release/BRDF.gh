#ifndef BRDF_H
#define BRDF_H

#ifndef PI
#define PI 3.1415926
#endif

vec3 importance_sample_lambert(in float f0, in float f1)
{
	float omega = f1 * 2.0 * PI;
	float cos_theta = sqrt(1.0 - f0);
	float sin_theta = sqrt(f0);
	return normalize(vec3(cos(omega) * cos_theta, sin(omega) * cos_theta, sin_theta));
}

vec3 importance_sample_GGX(in float f0, in float f1, in float _roughness, in vec3 N, in vec3 TangentX, in vec3 TangentY)
{
	float a = _roughness * _roughness;
	float Phi = 2 * PI * f0;
	float CosTheta = sqrt( (1.0 - f1) / ( 1.0 + (a*a - 1.0) * f1 ) );
	float SinTheta = sqrt( 1.0 - CosTheta * CosTheta );
	vec3 H;
	H.x = SinTheta * cos( Phi );
	H.y = SinTheta * sin( Phi );
	H.z = CosTheta;
	return normalize(TangentX * H.x + TangentY * H.y + N * H.z);
}
#endif