#include "DX12Compiler.h"
//#include <dxc/Support/Unicode.h>
#include <iostream>
#include <Helper.h>
namespace ShaderCompiler {
	DX12Compiler::DX12Compiler()
	{
		HRESULT hr = DxcCreateInstance(CLSID_DxcLibrary, IID_PPV_ARGS(&p_Library));

		hr = DxcCreateInstance(CLSID_DxcCompiler, IID_PPV_ARGS(&p_Compiler));
	}
	void DX12Compiler::AddInlcudePath(std::string const& path)
	{
	}
	void DX12Compiler::AddMacro(std::string const& macro_name, std::string const& macro_value)
	{
	}
	std::string DX12Compiler::PreprocessGLSLShader(std::string const& file_name, std::string const& shader_src, ECompileShaderType shader_type)
	{
		return std::string();
	}

	static std::wstring STATIC_SHADER_PROFILE_TABLE[static_cast<uint32_t>(ECompileShaderType::E_SHADER_TYPE_MAX)] =
	{
		L"vs_",
		L"hs_",
		L"ds_",
		L"gs_",
		L"ps_",
		L"cs_",
		//nvidia mesh shader
		L"as_",
		L"ms_",
		//nvidia ray tracing shader, all has "lib_" profile
		L"lib_",
		L"lib_",
		L"lib_",
		L"lib_",
		L"lib_",
		L"lib_",
	};

	std::wstring GetShaderProfile(ECompileShaderType shader_type, std::wstring shader_model)
	{
		return STATIC_SHADER_PROFILE_TABLE[static_cast<uint32_t>(shader_type)] + shader_model;
	}

	std::vector<char> DX12Compiler::CompileHLSLShaderSource(std::string const& file_name, std::string const& shader_src, ECompileShaderType shader_type, bool optimize)
	{
		ComPtr<IDxcBlobEncoding> sourceBlob;
		std::cout << shader_src << std::endl;
		DxcBuffer bufferDescriptor;
		bufferDescriptor.Ptr = shader_src.data();
		bufferDescriptor.Size = shader_src.size();
		bufferDescriptor.Encoding = DXC_CP_ACP;

		std::wstring utf16FileName = Helper::StringToWideString(file_name);
		std::wstring profile = GetShaderProfile(shader_type, L"6_0");
		LPCWSTR pszArgs[] =
		{
			utf16FileName.c_str(),            // Optional shader source file name for error reporting and for PIX shader source view.  
			L"-E", L"main",              // Entry point.
			L"-T", profile.c_str(),//GetShaderProfile(shader_type, L"6_0").c_str(),            // Target.
			//L"-Zi",                      // Enable debug information.
			//L"-D", L"MYDEFINE=1",        // A single define.
			//L"-Fo", L"myshader.bin",     // Optional. Stored in the pdb. 
			//L"-Fd", L"myshader.pdb",     // The file name of the pdb. This must either be supplied or the autogenerated file name must be used.
			//L"-Qstrip_reflect",          // Strip reflection into a separate blob. 
		};

		p_Library->CreateBlobWithEncodingOnHeapCopy(shader_src.c_str(), shader_src.size(), CP_UTF8,
			&sourceBlob);
		ComPtr<IDxcResult> pResults;
		p_Compiler->Compile(
			&bufferDescriptor,                // Source buffer.
			pszArgs,                // Array of pointers to arguments.
			_countof(pszArgs),      // Number of arguments.
			nullptr,        // User-provided interface to handle #include directives (optional).
			IID_PPV_ARGS(&pResults) // Compiler output status, buffer, and errors.
		);

		ComPtr<IDxcBlobUtf8> pErrors = nullptr;
		pResults->GetOutput(DXC_OUT_ERRORS, IID_PPV_ARGS(&pErrors), nullptr);
		if (pErrors != nullptr && pErrors->GetStringLength() != 0)
		{
			std::cout << pErrors->GetStringPointer() << std::endl;

		}
		HRESULT hrStatus;
		pResults->GetStatus(&hrStatus);
		if (FAILED(hrStatus))
		{
			std::cout << "Compilation Failed" << std::endl;
			return std::vector<char>();
		}

		ComPtr<IDxcBlob> pShader = nullptr;
		ComPtr<IDxcBlobUtf16> pShaderName = nullptr;
		pResults->GetOutput(DXC_OUT_OBJECT, IID_PPV_ARGS(&pShader), &pShaderName);
		if (pShader != nullptr)
		{
			std::vector<char> result;
			SIZE_T bufferSize = pShader->GetBufferSize();
			result.resize(pShader->GetBufferSize());
			memcpy(result.data(), pShader->GetBufferPointer(), pShader->GetBufferSize());
			return result;
		}

		////Unicode::UTF8ToUTF16String(file_name.c_str(), &utf16FileName);

		//ComPtr<IDxcOperationResult> compileResult;
		//p_Compiler->Compile()
		//p_Compiler->Compile(sourceBlob.Get(), utf16FileName.c_str(), L"main", GetShaderProfile(shader_type, L"5_0").c_str(), nullptr, 0, nullptr, 0, nullptr, &compileResult);
		//HRESULT status;
		//compileResult->GetStatus(&status);
		//if (FAILED(status))
		//{
		//	
		//	//compileResult->GetErrorBuffer()
		//	std::cout << "D3D12 Compiler Error: Invalid Shader" << std::endl;
		//	ComPtr<IDxcBlobEncoding> error;
		//	compileResult->GetErrorBuffer(&error);
		//	std::cout << static_cast<char*>(error->GetBufferPointer()) << std::endl;
		//	return std::vector<char>();
		//}
		//ComPtr<IDxcBlob> program;
		//compileResult->GetResult(&program);

		//if (program != nullptr)
		//{
		//	std::vector<char> result;
		//	SIZE_T bufferSize = program->GetBufferSize();
		//	result.resize(program->GetBufferSize());
		//	memcpy(result.data(), program->GetBufferPointer(), program->GetBufferSize());
		//	return result;
		//}
		return std::vector<char>();
	}
}